# %%
import numpy as np

# %%
def get_y(x, threshold=0.5):
    """
    Returns y based on AND logic. If x1 >= threshold and x2 >= threshold then 
    y = 1, else y = 0.

    Parameters
    ----------
    x: array_like
        An array of n by 2 matrix.

    threshold: float (default=0.5)
        The threshold for AND logic.
    
    Returns
    -------
    y: darray
        Array of labels.
    """
    return np.array(
        [1 if xx[0] >= threshold and xx[1] >= threshold else 0 for xx in x])

# %%
def get_not_y(y):
    """
    Apply logical not on y and return it

    Parameters
    ----------
    y: array
        Array of binary labels
    
    Returns
    -------
    outputs: array
        Array of binary labels after logical not applied on y
    """
    return np.array(np.logical_not(y), dtype=np.int)

# %%
def generate_samples(n=1000, threshold=0.5, scale=0.15, random_state=None):
    """
    Returns random samples to simulate AND logic (0^0=0, 0^1=0, 1^0=0, 1^1=1).
    The random samples are generated by Logistic Distribution.

    Parameters
    ----------
    n: int
        # of samples.
    
    threshold: float (default=0.5)
        The threshold of AND logic. The default is 0.5.
    
    scale: float (default=0.15)
        The scale parameter for Logistic Distribution.

    random_state: int (default=None)
        If int, random_state is the seed used by the random number generator.  
        If None, the random number generator is the RandomState instance used  
        by `np.random`.

    Returns
    -------
    x: array
        Array of n by 2 matrix.

    y: array
        Array of n by 1 coresponding labels for x.
    """
    if random_state is not None:
        np.random.seed(seed=random_state)

    x = np.random.logistic(threshold, scale, n * 2)
    x = x.reshape((n, 2))
    y = get_y(x, threshold)
    return x, y
